"""
–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è Instagram Bot
"""

import os
import json
from typing import Dict, List, Any

class BotConfig:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –±–æ—Ç–∞"""
    
    def __init__(self, config_file: str = "bot_config.json"):
        self.config_file = config_file
        self.config = self.load_config()
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        default_config = {
            "captcha_api_key": "",
            "proxy_list": [],
            "max_accounts": 10,
            "daily_action_limit": 100,
            "action_delays": {
                "like": [2, 5],
                "comment": [3, 8],
                "follow": [4, 10],
                "story_view": [1, 3],
                "story_reply": [2, 6]
            },
            "user_agents": [
                "Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
                "Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.210 Mobile Safari/537.36",
                "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1"
            ],
            "story_replies": [
                "üî•üî•üî•", "‚ù§Ô∏è", "–ö—Ä—É—Ç–æ!", "üëç", "–°—É–ø–µ—Ä!", 
                "üíØ", "üôå", "–ö–ª–∞—Å–Ω–æ!", "üëè", "Wow!",
                "–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!", "–¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç!", "–ö—Ä–∞—Å–∏–≤–æ!"
            ],
            "automation_settings": {
                "run_schedule": "09:00-22:00",
                "break_duration": [30, 120],
                "max_actions_per_hour": 20,
                "rotate_accounts": True,
                "use_proxy_rotation": True
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    default_config.update(loaded_config)
            else:
                self.save_config(default_config)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        
        return default_config
    
    def save_config(self, config: Dict[str, Any] = None):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        if config is None:
            config = self.config
        
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def get(self, key: str, default=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        return self.config.get(key, default)
    
    def set(self, key: str, value: Any):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        self.config[key] = value
        self.save_config()
    
    def get_story_replies(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Å—Ç–æ—Ä—ñ—Å"""
        return self.config.get('story_replies', [])
    
    def get_automation_settings(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        return self.config.get('automation_settings', {})
    
    def export_config(self, file_path: str):
        """–ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return False
    
    def import_config(self, file_path: str):
        """–Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                imported_config = json.load(f)
            self.config.update(imported_config)
            self.save_config()
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return False