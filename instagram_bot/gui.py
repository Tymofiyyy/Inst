"""
–ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Instagram Bot
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import json
from datetime import datetime
import queue
import os
from config import BotConfig

class InstagramBotGUI:
    """–ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("Instagram Automation Bot v2.0")
        self.root.geometry("1200x800")
        self.root.resizable(True, True)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
        self.bot = None
        self.config = BotConfig()
        self.log_queue = queue.Queue()
        self.automation_running = False
        
        # –°—Ç–∏–ª—ñ
        self.setup_styles()
        
        self.setup_gui()
        self.setup_logging()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏ –ª–æ–≥—ñ–≤
        self.root.after(100, self.process_log_queue)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        self.load_saved_data()
    
    def setup_styles(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ö–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞
        style.configure('Title.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Header.TLabel', font=('Arial', 10, 'bold'))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Warning.TLabel', foreground='orange')
    
    def setup_gui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        self.create_menu()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å—É
        self.create_status_bar()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.accounts_frame = ttk.Frame(notebook)
        notebook.add(self.accounts_frame, text="üîê –ê–∫–∞—É–Ω—Ç–∏")
        self.setup_accounts_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ü—ñ–ª–µ–π
        self.targets_frame = ttk.Frame(notebook)
        notebook.add(self.targets_frame, text="üéØ –¶—ñ–ª—ñ")
        self.setup_targets_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.settings_frame = ttk.Frame(notebook)
        notebook.add(self.settings_frame, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        self.setup_settings_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        self.automation_frame = ttk.Frame(notebook)
        notebook.add(self.automation_frame, text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")
        self.setup_automation_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥—ñ–≤
        self.logs_frame = ttk.Frame(notebook)
        notebook.add(self.logs_frame, text="üìã –õ–æ–≥–∏")
        self.setup_logs_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_frame = ttk.Frame(notebook)
        notebook.add(self.stats_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.setup_stats_tab()
    
    def create_menu(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é —Ñ–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤", command=self.import_accounts)
        file_menu.add_command(label="–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤", command=self.export_accounts)
        file_menu.add_separator()
        file_menu.add_command(label="–Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", command=self.import_config)
        file_menu.add_command(label="–ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", command=self.export_config)
        file_menu.add_separator()
        file_menu.add_command(label="–í–∏—Ö—ñ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", menu=tools_menu)
        tools_menu.add_command(label="–¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ", command=self.test_proxies)
        tools_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥–∏", command=self.clear_logs)
        tools_menu.add_command(label="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", command=self.restart_bot)
        
        # –ú–µ–Ω—é –¥–æ–≤—ñ–¥–∫–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–≤—ñ–¥–∫–∞", menu=help_menu)
        help_menu.add_command(label="–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", command=self.show_about)
        help_menu.add_command(label="–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", command=self.show_help)
    
    def create_status_bar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Å—Ç–∞—Ç—É—Å—É"""
        self.status_frame = ttk.Frame(self.root)
        self.status_frame.pack(side='bottom', fill='x')
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        self.status_label = ttk.Label(self.status_frame, text="–°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è")
        self.status_label.pack(side='left', padx=5)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.accounts_count_label = ttk.Label(self.status_frame, text="–ê–∫–∞—É–Ω—Ç–∏: 0")
        self.accounts_count_label.pack(side='left', padx=20)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Ü—ñ–ª–µ–π
        self.targets_count_label = ttk.Label(self.status_frame, text="–¶—ñ–ª—ñ: 0")
        self.targets_count_label.pack(side='left', padx=20)
        
        # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó
        self.last_action_label = ttk.Label(self.status_frame, text="–û—Å—Ç–∞–Ω–Ω—è –¥—ñ—è: --")
        self.last_action_label.pack(side='right', padx=5)
    
    def setup_accounts_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        main_frame = ttk.Frame(self.accounts_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏ Instagram", style='Title.TLabel')
        title_label.pack(pady=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É
        add_frame = ttk.LabelFrame(main_frame, text="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç")
        add_frame.pack(fill='x', pady=(0, 10))
        
        # –ü–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        fields_frame = ttk.Frame(add_frame)
        fields_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Label(fields_frame, text="–õ–æ–≥—ñ–Ω:").grid(row=0, column=0, sticky='w', padx=(0, 5))
        self.username_entry = ttk.Entry(fields_frame, width=20)
        self.username_entry.grid(row=0, column=1, padx=5)
        
        ttk.Label(fields_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=0, column=2, sticky='w', padx=(10, 5))
        self.password_entry = ttk.Entry(fields_frame, width=20, show='*')
        self.password_entry.grid(row=0, column=3, padx=5)
        
        ttk.Label(fields_frame, text="–ü—Ä–æ–∫—Å—ñ:").grid(row=0, column=4, sticky='w', padx=(10, 5))
        self.proxy_entry = ttk.Entry(fields_frame, width=25)
        self.proxy_entry.grid(row=0, column=5, padx=5)
        
        ttk.Button(fields_frame, text="–î–æ–¥–∞—Ç–∏", command=self.add_account).grid(row=0, column=6, padx=10)
        
        # –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
        list_frame = ttk.LabelFrame(main_frame, text="–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤")
        list_frame.pack(fill='both', expand=True)
        
        # –¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤
        columns = ('–õ–æ–≥—ñ–Ω', '–°—Ç–∞—Ç—É—Å', '–î—ñ—ó —Å—å–æ–≥–æ–¥–Ω—ñ', '–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–ü—Ä–æ–∫—Å—ñ')
        self.accounts_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=12)
        
        for col in columns:
            self.accounts_tree.heading(col, text=col)
            self.accounts_tree.column(col, width=150)
        
        # –°–∫—Ä–æ–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.accounts_tree.yview)
        self.accounts_tree.configure(yscrollcommand=scrollbar.set)
        
        self.accounts_tree.pack(side='left', fill='both', expand=True, padx=10, pady=10)
        scrollbar.pack(side='right', fill='y', pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill='x', pady=10)
        
        ttk.Button(buttons_frame, text="–û–Ω–æ–≤–∏—Ç–∏", command=self.refresh_accounts).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=self.remove_account).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="–¢–µ—Å—Ç –≤—Ö–æ–¥—É", command=self.test_account_login).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="–°–∫–∏–Ω—É—Ç–∏ –ª—ñ–º—ñ—Ç–∏", command=self.reset_daily_limits).pack(side='left', padx=5)
    
    def setup_targets_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ —Ü—ñ–ª–µ–π"""
        main_frame = ttk.Frame(self.targets_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–∏–º–∏ –∞–∫–∞—É–Ω—Ç–∞–º–∏", style='Title.TLabel')
        title_label.pack(pady=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        add_frame = ttk.LabelFrame(main_frame, text="–î–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å")
        add_frame.pack(fill='x', pady=(0, 10))
        
        entry_frame = ttk.Frame(add_frame)
        entry_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Label(entry_frame, text="–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:").pack(side='left')
        self.target_entry = ttk.Entry(entry_frame, width=30)
        self.target_entry.pack(side='left', padx=10)
        self.target_entry.bind('<Return>', lambda e: self.add_target())
        
        ttk.Button(entry_frame, text="–î–æ–¥–∞—Ç–∏", command=self.add_target).pack(side='left', padx=5)
        ttk.Button(entry_frame, text="–î–æ–¥–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É", command=self.import_targets).pack(side='left', padx=5)
        
        # –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–µ–π
        list_frame = ttk.LabelFrame(main_frame, text="–°–ø–∏—Å–æ–∫ —Ü—ñ–ª–µ–π")
        list_frame.pack(fill='both', expand=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫—É —Ç–∞ —Å–∫—Ä–æ–ª–±–∞—Ä–∞
        container = ttk.Frame(list_frame)
        container.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.targets_listbox = tk.Listbox(container, height=15)
        scrollbar_targets = ttk.Scrollbar(container, orient='vertical', command=self.targets_listbox.yview)
        self.targets_listbox.configure(yscrollcommand=scrollbar_targets.set)
        
        self.targets_listbox.pack(side='left', fill='both', expand=True)
        scrollbar_targets.pack(side='right', fill='y')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill='x', pady=10)
        
        ttk.Button(buttons_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=self.remove_target).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ", command=self.clear_targets).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="–ï–∫—Å–ø–æ—Ä—Ç", command=self.export_targets).pack(side='left', padx=5)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫
        self.targets_counter = ttk.Label(buttons_frame, text="–¶—ñ–ª–µ–π: 0")
        self.targets_counter.pack(side='right', padx=5)
    
    def setup_settings_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        main_frame = ttk.Frame(self.settings_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞", style='Title.TLabel')
        title_label.pack(pady=(0, 15))
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ø—á—ñ
        captcha_frame = ttk.LabelFrame(scrollable_frame, text="üîê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∫–∞–ø—á—ñ")
        captcha_frame.pack(fill='x', pady=5, padx=5)
        
        ttk.Label(captcha_frame, text="API –∫–ª—é—á 2captcha:").pack(anchor='w', padx=10, pady=(10, 0))
        self.captcha_key_entry = ttk.Entry(captcha_frame, width=60, show='*')
        self.captcha_key_entry.pack(fill='x', padx=10, pady=5)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
        proxy_frame = ttk.LabelFrame(scrollable_frame, text="üåê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ")
        proxy_frame.pack(fill='x', pady=5, padx=5)
        
        ttk.Label(proxy_frame, text="–ü—Ä–æ–∫—Å—ñ (—Ñ–æ—Ä–º–∞—Ç: ip:port:user:pass –∞–±–æ ip:port):").pack(anchor='w', padx=10, pady=(10, 0))
        self.proxy_text = scrolledtext.ScrolledText(proxy_frame, height=6)
        self.proxy_text.pack(fill='x', padx=10, pady=5)
        
        proxy_buttons = ttk.Frame(proxy_frame)
        proxy_buttons.pack(fill='x', padx=10, pady=5)
        ttk.Button(proxy_buttons, text="–¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ", command=self.test_proxies).pack(side='left', padx=5)
        ttk.Button(proxy_buttons, text="–û—á–∏—Å—Ç–∏—Ç–∏", command=lambda: self.proxy_text.delete('1.0', 'end')).pack(side='left', padx=5)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫
        delays_frame = ttk.LabelFrame(scrollable_frame, text="‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ (—Å–µ–∫—É–Ω–¥–∏)")
        delays_frame.pack(fill='x', pady=5, padx=5)
        
        delays_grid = ttk.Frame(delays_frame)
        delays_grid.pack(fill='x', padx=10, pady=10)
        
        # –õ–∞–π–∫–∏
        ttk.Label(delays_grid, text="–õ–∞–π–∫–∏ (–º—ñ–Ω-–º–∞–∫—Å):").grid(row=0, column=0, sticky='w')
        self.like_delay_entry = ttk.Entry(delays_grid, width=15)
        self.like_delay_entry.grid(row=0, column=1, padx=5)
        self.like_delay_entry.insert(0, "2-5")
        
        # –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ
        ttk.Label(delays_grid, text="–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ (–º—ñ–Ω-–º–∞–∫—Å):").grid(row=0, column=2, sticky='w', padx=(20,0))
        self.comment_delay_entry = ttk.Entry(delays_grid, width=15)
        self.comment_delay_entry.grid(row=0, column=3, padx=5)
        self.comment_delay_entry.insert(0, "3-8")
        
        # –°—Ç–æ—Ä—ñ—Å
        ttk.Label(delays_grid, text="–°—Ç–æ—Ä—ñ—Å (–º—ñ–Ω-–º–∞–∫—Å):").grid(row=1, column=0, sticky='w', pady=(10,0))
        self.story_delay_entry = ttk.Entry(delays_grid, width=15)
        self.story_delay_entry.grid(row=1, column=1, padx=5, pady=(10,0))
        self.story_delay_entry.insert(0, "1-3")
        
        # –ú—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏
        ttk.Label(delays_grid, text="–ú—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏ (–º—ñ–Ω-–º–∞–∫—Å):").grid(row=1, column=2, sticky='w', padx=(20,0), pady=(10,0))
        self.account_delay_entry = ttk.Entry(delays_grid, width=15)
        self.account_delay_entry.grid(row=1, column=3, padx=5, pady=(10,0))
        self.account_delay_entry.insert(0, "60-180")
        
        # –õ—ñ–º—ñ—Ç–∏
        limits_frame = ttk.LabelFrame(scrollable_frame, text="üìä –õ—ñ–º—ñ—Ç–∏ –±–µ–∑–ø–µ–∫–∏")
        limits_frame.pack(fill='x', pady=5, padx=5)
        
        limits_grid = ttk.Frame(limits_frame)
        limits_grid.pack(fill='x', padx=10, pady=10)
        
        ttk.Label(limits_grid, text="–î—ñ–π –Ω–∞ –¥–µ–Ω—å:").grid(row=0, column=0, sticky='w')
        self.daily_limit_entry = ttk.Entry(limits_grid, width=10)
        self.daily_limit_entry.grid(row=0, column=1, padx=5)
        self.daily_limit_entry.insert(0, "50")
        
        ttk.Label(limits_grid, text="–î—ñ–π –Ω–∞ –≥–æ–¥–∏–Ω—É:").grid(row=0, column=2, sticky='w', padx=(20,0))
        self.hourly_limit_entry = ttk.Entry(limits_grid, width=10)
        self.hourly_limit_entry.grid(row=0, column=3, padx=5)
        self.hourly_limit_entry.insert(0, "15")
        
        # –ö–Ω–æ–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        settings_buttons = ttk.Frame(scrollable_frame)
        settings_buttons.pack(fill='x', pady=20)
        
        ttk.Button(settings_buttons, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
                  command=self.save_settings).pack(side='left', padx=5)
        ttk.Button(settings_buttons, text="üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
                  command=self.load_settings).pack(side='left', padx=5)
        ttk.Button(settings_buttons, text="üîÑ –°–∫–∏–Ω—É—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö", 
                  command=self.reset_settings).pack(side='left', padx=5)
        
        # –£–ø–∞–∫–æ–≤–∫–∞ canvas —Ç–∞ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def setup_automation_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        main_frame = ttk.Frame(self.automation_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó", style='Title.TLabel')
        title_label.pack(pady=(0, 15))
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥—ñ–π
        actions_frame = ttk.LabelFrame(main_frame, text="üéØ –î—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        actions_frame.pack(fill='x', pady=(0, 10))
        
        actions_grid = ttk.Frame(actions_frame)
        actions_grid.pack(fill='x', padx=10, pady=10)
        
        self.like_posts_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(actions_grid, text="–õ–∞–π–∫–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –ø–æ—Å—Ç–∏", 
                       variable=self.like_posts_var).grid(row=0, column=0, sticky='w', pady=2)
        
        self.like_stories_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(actions_grid, text="–õ–∞–π–∫–∞—Ç–∏ —Å—Ç–æ—Ä—ñ—Å", 
                       variable=self.like_stories_var).grid(row=1, column=0, sticky='w', pady=2)
        
        self.reply_stories_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(actions_grid, text="–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å", 
                       variable=self.reply_stories_var).grid(row=2, column=0, sticky='w', pady=2)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä—ñ—Å
        messages_frame = ttk.LabelFrame(main_frame, text="üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Å—Ç–æ—Ä—ñ—Å")
        messages_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        quick_buttons = ttk.Frame(messages_frame)
        quick_buttons.pack(fill='x', padx=10, pady=5)
        
        ttk.Button(quick_buttons, text="üî• –î–æ–¥–∞—Ç–∏ –µ–º–æ–¥–∑—ñ", 
                  command=self.add_emoji_messages).pack(side='left', padx=5)
        ttk.Button(quick_buttons, text="üëç –î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ", 
                  command=self.add_positive_messages).pack(side='left', padx=5)
        ttk.Button(quick_buttons, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏", 
                  command=self.clear_messages).pack(side='left', padx=5)
        
        self.messages_text = scrolledtext.ScrolledText(messages_frame, height=8)
        self.messages_text.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        default_messages = "\n".join([
            "üî•üî•üî•", "‚ù§Ô∏è", "–ö—Ä—É—Ç–æ!", "üëç", "–°—É–ø–µ—Ä!", 
            "üíØ", "üôå", "–ö–ª–∞—Å–Ω–æ!", "üëè", "Wow!",
            "–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!", "–¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç!", "–ö—Ä–∞—Å–∏–≤–æ!"
        ])
        self.messages_text.insert('1.0', default_messages)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_frame = ttk.LabelFrame(main_frame, text="üöÄ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é")
        control_frame.pack(fill='x', pady=10)
        
        control_buttons = ttk.Frame(control_frame)
        control_buttons.pack(fill='x', padx=10, pady=10)
        
        self.start_button = ttk.Button(control_buttons, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é", 
                                      command=self.start_automation)
        self.start_button.pack(side='left', padx=5)
        
        self.stop_button = ttk.Button(control_buttons, text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é", 
                                     command=self.stop_automation, state='disabled')
        self.stop_button.pack(side='left', padx=5)
        
        self.pause_button = ttk.Button(control_buttons, text="‚è∏Ô∏è –ü–∞—É–∑–∞", 
                                      command=self.pause_automation, state='disabled')
        self.pause_button.pack(side='left', padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(control_buttons, variable=self.progress_var, 
                                           length=200, mode='determinate')
        self.progress_bar.pack(side='right', padx=10)
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = ttk.Frame(control_frame)
        status_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        self.automation_status_label = ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", style='Header.TLabel')
        self.automation_status_label.pack(side='left')
        
        self.eta_label = ttk.Label(status_frame, text="")
        self.eta_label.pack(side='right')
    
    def setup_logs_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥—ñ–≤"""
        main_frame = ttk.Frame(self.logs_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π", style='Title.TLabel')
        title_label.pack(pady=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        filter_frame = ttk.LabelFrame(main_frame, text="üîç –§—ñ–ª—å—Ç—Ä–∏")
        filter_frame.pack(fill='x', pady=(0, 10))
        
        filter_controls = ttk.Frame(filter_frame)
        filter_controls.pack(fill='x', padx=10, pady=5)
        
        ttk.Label(filter_controls, text="–†—ñ–≤–µ–Ω—å:").pack(side='left')
        self.log_level_var = tk.StringVar(value="–í—Å—ñ")
        log_level_combo = ttk.Combobox(filter_controls, textvariable=self.log_level_var, 
                                      values=["–í—Å—ñ", "INFO", "WARNING", "ERROR"], width=10)
        log_level_combo.pack(side='left', padx=5)
        
        ttk.Button(filter_controls, text="–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä", 
                  command=self.apply_log_filter).pack(side='left', padx=10)
        
        self.autoscroll_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(filter_controls, text="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", 
                       variable=self.autoscroll_var).pack(side='left', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ª–æ–≥—ñ–≤
        logs_container = ttk.Frame(main_frame)
        logs_container.pack(fill='both', expand=True)
        
        self.logs_text = scrolledtext.ScrolledText(logs_container, height=20, wrap='word')
        self.logs_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª–æ–≥–∞–º–∏
        logs_buttons = ttk.Frame(main_frame)
        logs_buttons.pack(fill='x', pady=10)
        
        ttk.Button(logs_buttons, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side='left', padx=5)
        ttk.Button(logs_buttons, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–≥–∏", 
                  command=self.export_logs).pack(side='left', padx=5)
        ttk.Button(logs_buttons, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", 
                  command=self.refresh_logs).pack(side='left', padx=5)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏
        self.logs_counter = ttk.Label(logs_buttons, text="–ó–∞–ø–∏—Å—ñ–≤: 0")
        self.logs_counter.pack(side='right', padx=5)
    
    def setup_stats_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        main_frame = ttk.Frame(self.stats_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏", style='Title.TLabel')
        title_label.pack(pady=(0, 15))
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        general_frame = ttk.LabelFrame(main_frame, text="üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        general_frame.pack(fill='x', pady=(0, 10))
        
        stats_grid = ttk.Frame(general_frame)
        stats_grid.pack(fill='x', padx=10, pady=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—è–¥–∫–∞—Ö
        self.total_actions_label = ttk.Label(stats_grid, text="–í—Å—å–æ–≥–æ –¥—ñ–π: 0")
        self.total_actions_label.grid(row=0, column=0, sticky='w', pady=2)
        
        self.successful_actions_label = ttk.Label(stats_grid, text="–£—Å–ø—ñ—à–Ω–∏—Ö: 0")
        self.successful_actions_label.grid(row=0, column=1, sticky='w', padx=20, pady=2)
        
        self.failed_actions_label = ttk.Label(stats_grid, text="–ù–µ—É—Å–ø—ñ—à–Ω–∏—Ö: 0")
        self.failed_actions_label.grid(row=0, column=2, sticky='w', padx=20, pady=2)
        
        self.success_rate_label = ttk.Label(stats_grid, text="–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: 0%")
        self.success_rate_label.grid(row=1, column=0, sticky='w', pady=2)
        
        self.active_accounts_label = ttk.Label(stats_grid, text="–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: 0")
        self.active_accounts_label.grid(row=1, column=1, sticky='w', padx=20, pady=2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö
        accounts_stats_frame = ttk.LabelFrame(main_frame, text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö")
        accounts_stats_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∞—É–Ω—Ç—ñ–≤
        stats_columns = ('–ê–∫–∞—É–Ω—Ç', '–î—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ', '–í—Å—å–æ–≥–æ –¥—ñ–π', '–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å')
        self.stats_tree = ttk.Treeview(accounts_stats_frame, columns=stats_columns, show='headings', height=10)
        
        for col in stats_columns:
            self.stats_tree.heading(col, text=col)
            self.stats_tree.column(col, width=120)
        
        stats_scrollbar = ttk.Scrollbar(accounts_stats_frame, orient='vertical', command=self.stats_tree.yview)
        self.stats_tree.configure(yscrollcommand=stats_scrollbar.set)
        
        self.stats_tree.pack(side='left', fill='both', expand=True, padx=10, pady=10)
        stats_scrollbar.pack(side='right', fill='y', pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        stats_buttons = ttk.Frame(main_frame)
        stats_buttons.pack(fill='x', pady=5)
        
        ttk.Button(stats_buttons, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                  command=self.refresh_stats).pack(side='left', padx=5)
        ttk.Button(stats_buttons, text="üìä –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
                  command=self.export_stats).pack(side='left', padx=5)
        ttk.Button(stats_buttons, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                  command=self.clear_stats).pack(side='left', padx=5)

    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏
    def add_account(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        proxy = self.proxy_entry.get().strip()
        
        if not username or not password:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å!")
            return
        
        try:
            if not self.bot:
                from instagram_bot import InstagramBot
                self.bot = InstagramBot(self.config.get('captcha_api_key'))
            
            self.bot.account_manager.add_account(username, password, proxy or None)
            
            # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
            self.username_entry.delete(0, 'end')
            self.password_entry.delete(0, 'end')
            self.proxy_entry.delete(0, 'end')
            
            self.refresh_accounts()
            self.update_status_bar()
            self.log(f"–ê–∫–∞—É–Ω—Ç {username} –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É: {e}")
    
    def remove_account(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É"""
        selection = self.accounts_tree.selection()
        if not selection:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return
        
        item = self.accounts_tree.item(selection[0])
        username = item['values'][0]
        
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç {username}?"):
            try:
                if self.bot:
                    self.bot.account_manager.remove_account(username)
                    self.refresh_accounts()
                    self.update_status_bar()
                    self.log(f"–ê–∫–∞—É–Ω—Ç {username} –≤–∏–¥–∞–ª–µ–Ω–æ!")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
    
    def refresh_accounts(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        for item in self.accounts_tree.get_children():
            self.accounts_tree.delete(item)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤
        if self.bot:
            for username, info in self.bot.account_manager.accounts.items():
                self.accounts_tree.insert('', 'end', values=(
                    username,
                    info.get('status', 'unknown'),
                    info.get('actions_count', 0),
                    info.get('last_activity', '–ù—ñ–∫–æ–ª–∏'),
                    info.get('proxy', '–ë–µ–∑ –ø—Ä–æ–∫—Å—ñ')[:20] + '...' if info.get('proxy') and len(info.get('proxy', '')) > 20 else info.get('proxy', '–ë–µ–∑ –ø—Ä–æ–∫—Å—ñ')
                ))
    
    def test_account_login(self):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥—É –≤ –∞–∫–∞—É–Ω—Ç"""
        selection = self.accounts_tree.selection()
        if not selection:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!")
            return
        
        item = self.accounts_tree.item(selection[0])
        username = item['values'][0]
        
        def test_login():
            try:
                if not self.bot:
                    from instagram_bot import InstagramBot
                    self.bot = InstagramBot(self.config.get('captcha_api_key'))
                
                success = self.bot.login_account(username)
                if success:
                    self.log(f"‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥—É –¥–ª—è {username} —É—Å–ø—ñ—à–Ω–∏–π!")
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í—Ö—ñ–¥ –≤ –∞–∫–∞—É–Ω—Ç {username} —É—Å–ø—ñ—à–Ω–∏–π!")
                else:
                    self.log(f"‚ùå –¢–µ—Å—Ç –≤—Ö–æ–¥—É –¥–ª—è {username} –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π!")
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ –∞–∫–∞—É–Ω—Ç {username}")
            except Exception as e:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –¥–ª—è {username}: {e}")
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        threading.Thread(target=test_login, daemon=True).start()
    
    def reset_daily_limits(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤"""
        if self.bot:
            self.bot.account_manager.reset_daily_limits()
            self.refresh_accounts()
            self.log("–î–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–∏ —Å–∫–∏–Ω—É—Ç–æ!")
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–î–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–∏ —Å–∫–∏–Ω—É—Ç–æ!")
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ü—ñ–ª—è–º–∏
    def add_target(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ"""
        target = self.target_entry.get().strip()
        if target:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            current_targets = [self.targets_listbox.get(i) for i in range(self.targets_listbox.size())]
            if target not in current_targets:
                self.targets_listbox.insert('end', target)
                self.target_entry.delete(0, 'end')
                self.update_targets_counter()
                self.update_status_bar()
                self.log(f"–¶—ñ–ª—å {target} –¥–æ–¥–∞–Ω–∞!")
            else:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–¶—è —Ü—ñ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î!")
    
    def remove_target(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ"""
        selection = self.targets_listbox.curselection()
        if selection:
            target = self.targets_listbox.get(selection[0])
            self.targets_listbox.delete(selection[0])
            self.update_targets_counter()
            self.update_status_bar()
            self.log(f"–¶—ñ–ª—å {target} –≤–∏–¥–∞–ª–µ–Ω–∞!")
    
    def clear_targets(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ü—ñ–ª–µ–π"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ü—ñ–ª—ñ?"):
            self.targets_listbox.delete(0, 'end')
            self.update_targets_counter()
            self.update_status_bar()
            self.log("–í—Å—ñ —Ü—ñ–ª—ñ –æ—á–∏—â–µ–Ω–æ!")
    
    def update_targets_counter(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ü—ñ–ª–µ–π"""
        count = self.targets_listbox.size()
        self.targets_counter.config(text=f"–¶—ñ–ª–µ–π: {count}")
    
    def import_targets(self):
        """–Ü–º–ø–æ—Ä—Ç —Ü—ñ–ª–µ–π –∑ —Ñ–∞–π–ª—É"""
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ —Ü—ñ–ª—è–º–∏",
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    if file_path.endswith('.json'):
                        targets = json.load(f)
                    else:
                        targets = f.read().splitlines()
                
                added_count = 0
                current_targets = [self.targets_listbox.get(i) for i in range(self.targets_listbox.size())]
                
                for target in targets:
                    target = target.strip()
                    if target and target not in current_targets:
                        self.targets_listbox.insert('end', target)
                        current_targets.append(target)
                        added_count += 1
                
                self.update_targets_counter()
                self.update_status_bar()
                self.log(f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {added_count} –Ω–æ–≤–∏—Ö —Ü—ñ–ª–µ–π!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {added_count} –Ω–æ–≤–∏—Ö —Ü—ñ–ª–µ–π!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    
    def export_targets(self):
        """–ï–∫—Å–ø–æ—Ä—Ç —Ü—ñ–ª–µ–π –¥–æ —Ñ–∞–π–ª—É"""
        if self.targets_listbox.size() == 0:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–µ–º–∞—î —Ü—ñ–ª–µ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ —Ü—ñ–ª—ñ",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json")]
        )
        
        if file_path:
            try:
                targets = [self.targets_listbox.get(i) for i in range(self.targets_listbox.size())]
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    if file_path.endswith('.json'):
                        json.dump(targets, f, indent=2, ensure_ascii=False)
                    else:
                        f.write('\n'.join(targets))
                
                self.log(f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(targets)} —Ü—ñ–ª–µ–π!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(targets)} —Ü—ñ–ª–µ–π!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á–∞ –∫–∞–ø—á—ñ
            self.config.set('captcha_api_key', self.captcha_key_entry.get())
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
            proxy_text = self.proxy_text.get('1.0', 'end').strip()
            proxy_list = [line.strip() for line in proxy_text.split('\n') if line.strip()]
            self.config.set('proxy_list', proxy_list)
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫
            delays = {}
            try:
                like_range = self.like_delay_entry.get().split('-')
                delays['like'] = [int(like_range[0]), int(like_range[1])]
            except:
                delays['like'] = [2, 5]
            
            try:
                comment_range = self.comment_delay_entry.get().split('-')
                delays['comment'] = [int(comment_range[0]), int(comment_range[1])]
            except:
                delays['comment'] = [3, 8]
            
            try:
                story_range = self.story_delay_entry.get().split('-')
                delays['story_reply'] = [int(story_range[0]), int(story_range[1])]
            except:
                delays['story_reply'] = [1, 3]
            
            self.config.set('action_delays', delays)
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
            try:
                daily_limit = int(self.daily_limit_entry.get())
                self.config.set('daily_action_limit', daily_limit)
            except:
                pass
            
            try:
                hourly_limit = int(self.hourly_limit_entry.get())
                automation_settings = self.config.get_automation_settings()
                automation_settings['max_actions_per_hour'] = hourly_limit
                self.config.set('automation_settings', automation_settings)
            except:
                pass
            
            self.log("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
    
    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API –∫–ª—é—á–∞
            self.captcha_key_entry.delete(0, 'end')
            self.captcha_key_entry.insert(0, self.config.get('captcha_api_key', ''))
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
            proxy_list = self.config.get('proxy_list', [])
            self.proxy_text.delete('1.0', 'end')
            self.proxy_text.insert('1.0', '\n'.join(proxy_list))
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫
            delays = self.config.get('action_delays', {})
            
            like_delay = delays.get('like', [2, 5])
            self.like_delay_entry.delete(0, 'end')
            self.like_delay_entry.insert(0, f"{like_delay[0]}-{like_delay[1]}")
            
            comment_delay = delays.get('comment', [3, 8])
            self.comment_delay_entry.delete(0, 'end')
            self.comment_delay_entry.insert(0, f"{comment_delay[0]}-{comment_delay[1]}")
            
            story_delay = delays.get('story_reply', [1, 3])
            self.story_delay_entry.delete(0, 'end')
            self.story_delay_entry.insert(0, f"{story_delay[0]}-{story_delay[1]}")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
            daily_limit = self.config.get('daily_action_limit', 50)
            self.daily_limit_entry.delete(0, 'end')
            self.daily_limit_entry.insert(0, str(daily_limit))
            
            automation_settings = self.config.get_automation_settings()
            hourly_limit = automation_settings.get('max_actions_per_hour', 15)
            self.hourly_limit_entry.delete(0, 'end')
            self.hourly_limit_entry.insert(0, str(hourly_limit))
            
            self.log("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
    
    def reset_settings(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö?"):
            # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
            self.captcha_key_entry.delete(0, 'end')
            self.proxy_text.delete('1.0', 'end')
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏
            self.like_delay_entry.delete(0, 'end')
            self.like_delay_entry.insert(0, "2-5")
            
            self.comment_delay_entry.delete(0, 'end')
            self.comment_delay_entry.insert(0, "3-8")
            
            self.story_delay_entry.delete(0, 'end')
            self.story_delay_entry.insert(0, "1-3")
            
            self.account_delay_entry.delete(0, 'end')
            self.account_delay_entry.insert(0, "60-180")
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ª—ñ–º—ñ—Ç–∏
            self.daily_limit_entry.delete(0, 'end')
            self.daily_limit_entry.insert(0, "50")
            
            self.hourly_limit_entry.delete(0, 'end')
            self.hourly_limit_entry.insert(0, "15")
            
            self.log("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö!")
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    def add_emoji_messages(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        emoji_messages = ["üî•üî•üî•", "‚ù§Ô∏è", "üíØ", "üôå", "üëè", "üòç", "ü§©", "üí™", "‚ú®", "üéâ"]
        current_text = self.messages_text.get('1.0', 'end').strip()
        if current_text:
            current_text += "\n"
        current_text += "\n".join(emoji_messages)
        
        self.messages_text.delete('1.0', 'end')
        self.messages_text.insert('1.0', current_text)
        self.log("–î–æ–¥–∞–Ω–æ –µ–º–æ–¥–∑—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
    
    def add_positive_messages(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        positive_messages = [
            "–ö—Ä—É—Ç–æ!", "–°—É–ø–µ—Ä!", "–ö–ª–∞—Å–Ω–æ!", "–ß—É–¥–æ–≤–æ!", "–¢–æ–ø!", 
            "–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!", "–ö—Ä–∞—Å–∏–≤–æ!", "–ù–µ—Ä–µ–∞–ª—å–Ω–æ!", "–ë–æ–º–±–∞!"
        ]
        current_text = self.messages_text.get('1.0', 'end').strip()
        if current_text:
            current_text += "\n"
        current_text += "\n".join(positive_messages)
        
        self.messages_text.delete('1.0', 'end')
        self.messages_text.insert('1.0', current_text)
        self.log("–î–æ–¥–∞–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
    
    def clear_messages(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?"):
            self.messages_text.delete('1.0', 'end')
            self.log("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ!")
    
    # –ú–µ—Ç–æ–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
    def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤ —Ç–∞ —Ü—ñ–ª–µ–π
            if not self.bot or not self.bot.account_manager.accounts:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–∫–∞—É–Ω—Ç!")
                return
            
            if self.targets_listbox.size() == 0:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü—ñ–ª—å!")
                return
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
            if not self.bot:
                from instagram_bot import InstagramBot
                self.bot = InstagramBot(self.config.get('captcha_api_key'))
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            accounts = [{'username': username} for username in self.bot.account_manager.accounts.keys()]
            targets = [self.targets_listbox.get(i) for i in range(self.targets_listbox.size())]
            
            messages = [line.strip() for line in self.messages_text.get('1.0', 'end').split('\n') if line.strip()]
            
            if not messages:
                messages = self.config.get_story_replies()
            
            config = {
                'accounts': accounts,
                'targets': targets,
                'actions': {
                    'like_posts': self.like_posts_var.get(),
                    'like_stories': self.like_stories_var.get(),
                    'reply_stories': self.reply_stories_var.get()
                },
                'story_messages': messages
            }
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.automation_thread = threading.Thread(
                target=self.run_automation_thread,
                args=(config,),
                daemon=True
            )
            self.automation_thread.start()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            self.automation_running = True
            self.start_button.config(state='disabled')
            self.stop_button.config(state='normal')
            self.pause_button.config(state='normal')
            
            self.automation_status_label.config(text="–°—Ç–∞—Ç—É—Å: –ü—Ä–∞—Ü—é—î", style='Success.TLabel')
            self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞")
            
            self.log("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞!")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    
    def run_automation_thread(self, config):
        """–ü–æ—Ç—ñ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            self.bot.run_automation(config)
            self.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
        finally:
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
            self.root.after(0, self.automation_finished)
    
    def stop_automation(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            self.automation_running = False
            if self.bot:
                self.bot.close_all_drivers()
            
            self.automation_finished()
            self.log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞!")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏: {e}")
    
    def pause_automation(self):
        """–ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—É–∑–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        self.log("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞!")
    
    def automation_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        self.automation_running = False
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        self.pause_button.config(state='disabled')
        
        self.automation_status_label.config(text="–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ", style='Header.TLabel')
        self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è")
        self.progress_var.set(0)
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ª–æ–≥—ñ–≤
    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        import logging
        
        class GuiLogHandler(logging.Handler):
            def __init__(self, log_queue):
                super().__init__()
                self.log_queue = log_queue
            
            def emit(self, record):
                log_entry = self.format(record)
                self.log_queue.put(log_entry)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è GUI
        gui_handler = GuiLogHandler(self.log_queue)
        gui_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        
        logger = logging.getLogger()
        logger.addHandler(gui_handler)
        logger.setLevel(logging.INFO)
    
    def process_log_queue(self):
        """–û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –ª–æ–≥—ñ–≤"""
        try:
            while True:
                log_entry = self.log_queue.get_nowait()
                self.add_log_entry(log_entry)
        except queue.Empty:
            pass
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
        self.root.after(100, self.process_log_queue)
    
    def add_log_entry(self, log_entry):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–æ –ª–æ–≥—ñ–≤"""
        self.logs_text.insert('end', log_entry + '\n')
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if self.autoscroll_var.get():
            self.logs_text.see('end')
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ (–∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 1000)
        lines = int(self.logs_text.index('end-1c').split('.')[0])
        if lines > 1000:
            self.logs_text.delete('1.0', f'{lines-1000}.0')
    
    def log(self, message: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—ñ–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        self.add_log_entry(log_entry)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó
        self.last_action_label.config(text=f"–û—Å—Ç–∞–Ω–Ω—è –¥—ñ—è: {timestamp}")
    
    def clear_logs(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ª–æ–≥–∏?"):
            self.logs_text.delete('1.0', 'end')
            self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ!")
    
    def export_logs(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤"""
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–≥–∏",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                logs_content = self.logs_text.get('1.0', 'end')
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(logs_content)
                self.log("–õ–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–õ–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
    
    def apply_log_filter(self):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –ª–æ–≥—ñ–≤"""
        filter_level = self.log_level_var.get()
        self.log(f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä: {filter_level}")
    
    def refresh_logs(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤"""
        self.log("üîÑ –õ–æ–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def refresh_stats(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            for item in self.stats_tree.get_children():
                self.stats_tree.delete(item)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_actions = 0
            successful_actions = 0
            failed_actions = 0
            active_accounts = 0
            
            if self.bot:
                for username, info in self.bot.account_manager.accounts.items():
                    actions_count = info.get('actions_count', 0)
                    status = info.get('status', 'unknown')
                    
                    total_actions += actions_count
                    if status == 'active':
                        active_accounts += 1
                        successful_actions += actions_count
                    else:
                        failed_actions += actions_count
                    
                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
                    success_rate = "100%" if actions_count > 0 else "0%"
                    self.stats_tree.insert('', 'end', values=(
                        username,
                        actions_count,
                        actions_count,
                        success_rate,
                        status
                    ))
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª—ñ–≤
            self.total_actions_label.config(text=f"–í—Å—å–æ–≥–æ –¥—ñ–π: {total_actions}")
            self.successful_actions_label.config(text=f"–£—Å–ø—ñ—à–Ω–∏—Ö: {successful_actions}")
            self.failed_actions_label.config(text=f"–ù–µ—É—Å–ø—ñ—à–Ω–∏—Ö: {failed_actions}")
            self.active_accounts_label.config(text=f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {active_accounts}")
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
            if total_actions > 0:
                success_rate = (successful_actions / total_actions) * 100
                self.success_rate_label.config(text=f"–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
            else:
                self.success_rate_label.config(text="–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: 0%")
            
            self.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def export_stats(self):
        """–ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("CSV files", "*.csv"), ("Text files", "*.txt")]
        )
        
        if file_path:
            try:
                stats_data = {
                    'timestamp': datetime.now().isoformat(),
                    'accounts': {},
                    'summary': {
                        'total_actions': 0,
                        'successful_actions': 0,
                        'failed_actions': 0,
                        'active_accounts': 0
                    }
                }
                
                if self.bot:
                    for username, info in self.bot.account_manager.accounts.items():
                        stats_data['accounts'][username] = info
                        stats_data['summary']['total_actions'] += info.get('actions_count', 0)
                        if info.get('status') == 'active':
                            stats_data['summary']['active_accounts'] += 1
                
                if file_path.endswith('.json'):
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(stats_data, f, indent=2, ensure_ascii=False)
                elif file_path.endswith('.csv'):
                    import csv
                    with open(file_path, 'w', newline='', encoding='utf-8') as f:
                        writer = csv.writer(f)
                        writer.writerow(['–ê–∫–∞—É–Ω—Ç', '–î—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ', '–°—Ç–∞—Ç—É—Å', '–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])
                        for username, info in stats_data['accounts'].items():
                            writer.writerow([
                                username,
                                info.get('actions_count', 0),
                                info.get('status', 'unknown'),
                                info.get('last_activity', '–ù—ñ–∫–æ–ª–∏')
                            ])
                else:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê INSTAGRAM BOT ===\n\n")
                        f.write(f"–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {stats_data['timestamp']}\n")
                        f.write(f"–í—Å—å–æ–≥–æ –¥—ñ–π: {stats_data['summary']['total_actions']}\n")
                        f.write(f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {stats_data['summary']['active_accounts']}\n\n")
                        f.write("=== –î–ï–¢–ê–õ–Ü –ü–û –ê–ö–ê–£–ù–¢–ê–• ===\n")
                        for username, info in stats_data['accounts'].items():
                            f.write(f"\n{username}:\n")
                            f.write(f"  –î—ñ–π: {info.get('actions_count', 0)}\n")
                            f.write(f"  –°—Ç–∞—Ç—É—Å: {info.get('status', 'unknown')}\n")
                            f.write(f"  –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {info.get('last_activity', '–ù—ñ–∫–æ–ª–∏')}\n")
                
                self.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
    
    def clear_stats(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?"):
            if self.bot:
                self.bot.account_manager.reset_daily_limits()
                self.refresh_stats()
                self.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞!")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏
    def update_status_bar(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Å—Ç–∞—Ç—É—Å—É"""
        accounts_count = len(self.bot.account_manager.accounts) if self.bot else 0
        targets_count = self.targets_listbox.size()
        
        self.accounts_count_label.config(text=f"–ê–∫–∞—É–Ω—Ç–∏: {accounts_count}")
        self.targets_count_label.config(text=f"–¶—ñ–ª—ñ: {targets_count}")
    
    def load_saved_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            self.load_settings()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
            from instagram_bot import InstagramBot
            self.bot = InstagramBot(self.config.get('captcha_api_key'))
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            self.refresh_accounts()
            self.update_status_bar()
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    # –ú–µ—Ç–æ–¥–∏ –º–µ–Ω—é
    def import_accounts(self):
        """–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏",
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json")]
        )
        
        if file_path:
            try:
                if not self.bot:
                    from instagram_bot import InstagramBot
                    self.bot = InstagramBot(self.config.get('captcha_api_key'))
                
                added_count = 0
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    if file_path.endswith('.json'):
                        accounts_data = json.load(f)
                        for account in accounts_data:
                            username = account.get('username')
                            password = account.get('password')
                            proxy = account.get('proxy')
                            if username and password:
                                self.bot.account_manager.add_account(username, password, proxy)
                                added_count += 1
                    else:
                        for line in f:
                            parts = line.strip().split(':')
                            if len(parts) >= 2:
                                username = parts[0]
                                password = parts[1]
                                proxy = ':'.join(parts[2:]) if len(parts) > 2 else None
                                self.bot.account_manager.add_account(username, password, proxy)
                                added_count += 1
                
                self.refresh_accounts()
                self.update_status_bar()
                self.log(f"üì• –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {added_count} –∞–∫–∞—É–Ω—Ç—ñ–≤!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {added_count} –∞–∫–∞—É–Ω—Ç—ñ–≤!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    
    def export_accounts(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–æ —Ñ–∞–π–ª—É"""
        if not self.bot or not self.bot.account_manager.accounts:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json")]
        )
        
        if file_path:
            try:
                if file_path.endswith('.json'):
                    accounts_data = []
                    for username, info in self.bot.account_manager.accounts.items():
                        accounts_data.append({
                            'username': username,
                            'password': info['password'],
                            'proxy': info.get('proxy'),
                            'status': info.get('status'),
                            'actions_count': info.get('actions_count', 0)
                        })
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(accounts_data, f, indent=2, ensure_ascii=False)
                else:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        for username, info in self.bot.account_manager.accounts.items():
                            line = f"{username}:{info['password']}"
                            if info.get('proxy'):
                                line += f":{info['proxy']}"
                            f.write(line + '\n')
                
                self.log(f"üì§ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(self.bot.account_manager.accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(self.bot.account_manager.accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
    
    def import_config(self):
        """–Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó",
            filetypes=[("JSON files", "*.json")]
        )
        
        if file_path:
            if self.config.import_config(file_path):
                self.load_settings()
                self.log("üì• –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!")
    
    def export_config(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json")]
        )
        
        if file_path:
            if self.config.export_config(file_path):
                self.log("üì§ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!")
    
    def test_proxies(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ"""
        proxy_text = self.proxy_text.get('1.0', 'end').strip()
        if not proxy_text:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!")
            return
        
        def test_proxies_thread():
            try:
                from utils import ProxyManager
                proxy_manager = ProxyManager()
                
                proxy_list = [line.strip() for line in proxy_text.split('\n') if line.strip()]
                self.log(f"üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {len(proxy_list)} –ø—Ä–æ–∫—Å—ñ...")
                
                working_count = 0
                for proxy in proxy_list:
                    proxy_manager.add_proxy(proxy)
                    if proxy_manager.test_proxy(proxy):
                        working_count += 1
                        self.log(f"‚úÖ –ü—Ä–æ–∫—Å—ñ {proxy} –ø—Ä–∞—Ü—é—î")
                    else:
                        self.log(f"‚ùå –ü—Ä–æ–∫—Å—ñ {proxy} –Ω–µ –ø—Ä–∞—Ü—é—î")
                
                self.log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {working_count}/{len(proxy_list)} –ø—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—é—Ç—å")
                
                def show_result():
                    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", 
                                      f"–ü—Ä–∞—Ü—é—é—á–∏—Ö –ø—Ä–æ–∫—Å—ñ: {working_count} –∑ {len(proxy_list)}")
                
                self.root.after(0, show_result)
                
            except Exception as e:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: {e}")
        
        threading.Thread(target=test_proxies_thread, daemon=True).start()
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞? –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –±—É–¥—É—Ç—å –∑–∞–∫—Ä–∏—Ç—ñ."):
            try:
                if self.bot:
                    self.bot.close_all_drivers()
                
                from instagram_bot import InstagramBot
                self.bot = InstagramBot(self.config.get('captcha_api_key'))
                
                self.refresh_accounts()
                self.update_status_bar()
                self.log("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É: {e}")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"""
        about_text = """
Instagram Automation Bot v2.0

ü§ñ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ª–∞–π–∫–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
‚Ä¢ –õ–∞–π–∫–∏ —Å—Ç–æ—Ä—ñ—Å —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
‚Ä¢ –ú—É–ª—å—Ç–∏–∞–∫–∞—É–Ω—Ç–Ω—ñ—Å—Ç—å
‚Ä¢ –û–±—Ö—ñ–¥ —Å–∏—Å—Ç–µ–º –∑–∞—Ö–∏—Å—Ç—É
‚Ä¢ –†–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∫–∞–ø—á—ñ
‚Ä¢ –†–æ—Ç–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ

üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞:
‚Ä¢ –û–±—Ö—ñ–¥ –∫–∞–ø—á—ñ
‚Ä¢ –î–µ—Ç–µ–∫—Ü—ñ—è –±–æ—Ç—ñ–≤
‚Ä¢ IP –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ Shadowban –∑–∞—Ö–∏—Å—Ç
‚Ä¢ –ü–æ—Å—Ç—ñ–π–Ω—ñ –±–∞–Ω–∏

‚öôÔ∏è –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
‚Ä¢ GUI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ CLI —Ä–µ–∂–∏–º
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è

üìß –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: telegram @your_username
üåê –í–µ—Ä—Å—ñ—è: 2.0.0
üìÖ –î–∞—Ç–∞: 2024
        """
        messagebox.showinfo("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", about_text)
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é"""
        help_text = """
üìñ –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ü–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Æ:

1Ô∏è‚É£ –î–û–î–ê–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–Ü–í:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É "üîê –ê–∫–∞—É–Ω—Ç–∏"
   ‚Ä¢ –í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω, –ø–∞—Ä–æ–ª—å —Ç–∞ –ø—Ä–æ–∫—Å—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–î–æ–¥–∞—Ç–∏"

2Ô∏è‚É£ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¶–Ü–õ–ï–ô:
   ‚Ä¢ –í–∫–ª–∞–¥–∫–∞ "üéØ –¶—ñ–ª—ñ"
   ‚Ä¢ –î–æ–¥–∞–π—Ç–µ —ñ–º–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
   ‚Ä¢ –ú–æ–∂–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É

3Ô∏è‚É£ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø:
   ‚Ä¢ –í–∫–ª–∞–¥–∫–∞ "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
   ‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–∞—Ç—Ä–∏–º–∫–∏ —Ç–∞ –ª—ñ–º—ñ—Ç–∏
   ‚Ä¢ –î–æ–¥–∞–π—Ç–µ API –∫–ª—é—á –∫–∞–ø—á—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
   ‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—Ä–æ–∫—Å—ñ

4Ô∏è‚É£ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø:
   ‚Ä¢ –í–∫–ª–∞–¥–∫–∞ "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è"
   ‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:
     - –õ–∞–π–∫–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –ø–æ—Å—Ç–∏
     - –õ–∞–π–∫–∞—Ç–∏ —Å—Ç–æ—Ä—ñ—Å
     - –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å
   ‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä—ñ—Å
   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é"

5Ô∏è‚É£ –ú–û–ù–Ü–¢–û–†–ò–ù–ì:
   ‚Ä¢ –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º —É –≤–∫–ª–∞–¥—Ü—ñ "üìã –õ–æ–≥–∏"
   ‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É –≤–∫–ª–∞–¥—Ü—ñ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

üîí –ë–ï–ó–ü–ï–ö–ê:
   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ–º—ñ—Ä–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–≤–∏—â—É–π—Ç–µ –ª—ñ–º—ñ—Ç–∏ (50-100 –¥—ñ–π –Ω–∞ –¥–µ–Ω—å)
   ‚Ä¢ –†–æ–±—ñ—Ç—å –ø–µ—Ä–µ—Ä–≤–∏ –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏
   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É

‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:
   ‚Ä¢ –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —É–º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Instagram
   ‚Ä¢ –ù–µ —Å–ø–∞–º—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Å—Ç–∞–Ω –∞–∫–∞—É–Ω—Ç—ñ–≤
   ‚Ä¢ –†–æ–±—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –¥–∞–Ω–∏—Ö
        """
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        help_window = tk.Toplevel(self.root)
        help_window.title("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")
        help_window.geometry("700x600")
        help_window.transient(self.root)
        help_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        help_window.update_idletasks()
        x = (help_window.winfo_screenwidth() // 2) - (help_window.winfo_width() // 2)
        y = (help_window.winfo_screenheight() // 2) - (help_window.winfo_height() // 2)
        help_window.geometry(f"+{x}+{y}")
        
        help_text_widget = scrolledtext.ScrolledText(help_window, wrap='word', font=('Arial', 10))
        help_text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        help_text_widget.insert('1.0', help_text)
        help_text_widget.config(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        close_button = ttk.Button(help_window, text="–ó–∞–∫—Ä–∏—Ç–∏", command=help_window.destroy)
        close_button.pack(pady=10)


def main():
    """–ó–∞–ø—É—Å–∫ GUI"""
    root = tk.Tk()
    app = InstagramBotGUI(root)
    
    # –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
    def on_closing():
        if hasattr(app, 'automation_running') and app.automation_running:
            if messagebox.askokcancel("–í–∏—Ö—ñ–¥", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î. –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É?"):
                if hasattr(app, 'stop_automation'):
                    app.stop_automation()
                root.destroy()
        else:
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    root.minsize(1000, 700)
    
    # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ (—è–∫—â–æ —î)
    try:
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
        # root.iconbitmap('icon.ico')
        pass
    except:
        pass
    
    print("üöÄ Instagram Bot GUI –∑–∞–ø—É—â–µ–Ω–æ!")
    root.mainloop()


if __name__ == "__main__":
    main()