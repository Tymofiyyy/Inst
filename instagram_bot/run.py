#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Instagram Bot
"""

import sys
import os
import argparse
import logging
import time
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ —à–ª—è—Ö—É
sys.path.append(str(Path(__file__).parent))

try:
    from instagram_bot import InstagramBot
    from config import BotConfig
    from utils import (
        setup_logging, ProxyManager, StatisticsManager, 
        DatabaseManager, FileManager, SystemUtils,
        ConfigValidator, create_default_config
    )
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –æ–¥–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    sys.exit(1)


class BotScheduler:
    """–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±–æ—Ç–∞"""
    
    def __init__(self, bot: InstagramBot):
        self.bot = bot
        self.running = False
        self.scheduler_thread = None
        
    def schedule_daily_automation(self, config: dict, start_time: str = "09:00"):
        """–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            import schedule
            schedule.every().day.at(start_time).do(
                self.run_automation_job, config
            )
            logging.info(f"–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —â–æ–¥–µ–Ω–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –Ω–∞ {start_time}")
        except ImportError:
            logging.error("–î–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ 'schedule': pip install schedule")
            
    def schedule_account_rotation(self, interval_hours: int = 4):
        """–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ—Ç–∞—Ü—ñ—ó –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            import schedule
            schedule.every(interval_hours).hours.do(self.rotate_accounts)
            logging.info(f"–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Ä–æ—Ç–∞—Ü—ñ—é –∞–∫–∞—É–Ω—Ç—ñ–≤ –∫–æ–∂–Ω—ñ {interval_hours} –≥–æ–¥–∏–Ω")
        except ImportError:
            pass
        
    def schedule_health_check(self, interval_minutes: int = 30):
        """–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            import schedule
            schedule.every(interval_minutes).minutes.do(self.check_account_health)
            logging.info(f"–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–¥–æ—Ä–æ–≤'—è –∫–æ–∂–Ω—ñ {interval_minutes} —Ö–≤–∏–ª–∏–Ω")
        except ImportError:
            pass
        
    def run_automation_job(self, config: dict):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
            self.bot.run_automation(config)
            logging.info("‚úÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
    
    def rotate_accounts(self):
        """–†–æ—Ç–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            logging.info("üîÑ –†–æ—Ç–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç—ñ–≤")
            self.bot.close_all_drivers()
            time.sleep(60)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Ä–æ—Ç–∞—Ü—ñ—è–º–∏
            logging.info("‚úÖ –†–æ—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ—Ç–∞—Ü—ñ—ó –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
    
    def check_account_health(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            logging.info("üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –∞–∫–∞—É–Ω—Ç—ñ–≤")
            for username in self.bot.account_manager.accounts:
                if self.bot.account_manager.is_account_available(username):
                    self.bot.monitor_account_health(username)
            logging.info("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è: {e}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            import schedule
            import threading
            
            self.running = True
            self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
            self.scheduler_thread.start()
            logging.info("üìÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
        except ImportError:
            logging.error("–î–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ 'schedule': pip install schedule")
    
    def stop_scheduler(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            import schedule
            self.running = False
            schedule.clear()
            logging.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except ImportError:
            pass
    
    def _run_scheduler(self):
        """–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            import schedule
            while self.running:
                schedule.run_pending()
                time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        except ImportError:
            pass


def check_system_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python
    if sys.version_info < (3, 8):
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä—Å—ñ—è Python 3.8 –∞–±–æ –≤–∏—â–∞")
        return False
    
    print(f"‚úÖ Python {sys.version}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    dependencies = SystemUtils.check_dependencies()
    missing_deps = [dep for dep, available in dependencies.items() if not available]
    
    if missing_deps:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {', '.join(missing_deps)}")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é: pip install -r requirements.txt")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Chrome
    chrome_version = SystemUtils.get_chrome_version()
    if chrome_version == "Unknown":
        print("‚ö†Ô∏è Chrome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–µ—Ä—Å—ñ—é –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Google Chrome –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Selenium")
    else:
        print(f"‚úÖ Chrome {chrome_version}")
    
    return True


def setup_environment():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    print("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    directories = ['logs', 'backups', 'data', 'exports']
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logging('logs/instagram_bot.log')
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    config_file = 'bot_config.json'
    if not os.path.exists(config_file):
        config = BotConfig(config_file)
        default_config = create_default_config()
        config.config = default_config
        config.save_config()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {config_file}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É requirements.txt —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
    requirements_file = 'requirements.txt'
    if not os.path.exists(requirements_file):
        requirements = [
            "selenium==4.15.2",
            "opencv-python==4.8.1.78",
            "Pillow==10.0.1", 
            "requests==2.31.0",
            "pytesseract==0.3.10",
            "psutil==5.9.6",
            "numpy==1.24.3",
            "webdriver-manager==4.0.1",
            "schedule==1.2.0"
        ]
        
        with open(requirements_file, 'w') as f:
            f.write('\n'.join(requirements))
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {requirements_file}")
    
    print("‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")


def run_gui_mode():
    """–ó–∞–ø—É—Å–∫ –≤ GUI —Ä–µ–∂–∏–º—ñ"""
    try:
        import tkinter as tk
        from gui import InstagramBotGUI
        
        print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ GUI —Ä–µ–∂–∏–º—É...")
        
        root = tk.Tk()
        app = InstagramBotGUI(root)
        
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
        def on_closing():
            if hasattr(app, 'automation_running') and app.automation_running:
                import tkinter.messagebox as messagebox
                if messagebox.askokcancel("–í–∏—Ö—ñ–¥", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î. –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É?"):
                    if hasattr(app, 'stop_automation'):
                        app.stop_automation()
                    root.destroy()
            else:
                root.destroy()
        
        root.protocol("WM_DELETE_WINDOW", on_closing)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ (—è–∫—â–æ —î)
        try:
            root.iconbitmap('icon.ico')
        except:
            pass
        
        print("‚úÖ GUI –∑–∞–ø—É—â–µ–Ω–æ")
        root.mainloop()
        
    except ImportError:
        print("‚ùå –î–ª—è GUI —Ä–µ–∂–∏–º—É –ø–æ—Ç—Ä—ñ–±–µ–Ω tkinter")
        print("–í Ubuntu/Debian: sudo apt-get install python3-tk")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É GUI: {e}")
        return False
    
    return True


def run_cli_mode(args):
    """–ó–∞–ø—É—Å–∫ –≤ CLI —Ä–µ–∂–∏–º—ñ"""
    print("üíª –ó–∞–ø—É—Å–∫ CLI —Ä–µ–∂–∏–º—É...")
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = BotConfig(args.config)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        validation = ConfigValidator.validate_config(config.config)
        if not validation['valid']:
            print("‚ùå –ü–æ–º–∏–ª–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
            for error in validation['errors']:
                print(f"  - {error}")
            return False
        
        if validation['warnings']:
            print("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
            for warning in validation['warnings']:
                print(f"  - {warning}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
        bot = InstagramBot(config.get('captcha_api_key'))
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É
        if args.accounts:
            account_count = load_accounts_from_file(bot, args.accounts)
            print(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {account_count} –∞–∫–∞—É–Ω—Ç—ñ–≤")
        
        if not bot.account_manager.accounts:
            print("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏")
            print("–î–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∞–±–æ GUI —Ä–µ–∂–∏–º")
            return False
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π –∑ —Ñ–∞–π–ª—É
        targets = []
        if args.targets:
            targets = load_targets_from_file(args.targets)
            print(f"üéØ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(targets)} —Ü—ñ–ª–µ–π")
        
        if not targets:
            print("‚ùå –ù–µ–º–∞—î —Ü—ñ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
            print("–î–æ–¥–∞–π—Ç–µ —Ü—ñ–ª—ñ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∞–±–æ GUI —Ä–µ–∂–∏–º")
            return False
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        automation_config = {
            'accounts': [{'username': username} for username in bot.account_manager.accounts.keys()],
            'targets': targets,
            'actions': {
                'like_posts': args.like_posts if hasattr(args, 'like_posts') else True,
                'like_stories': args.like_stories if hasattr(args, 'like_stories') else True,
                'reply_stories': args.reply_stories if hasattr(args, 'reply_stories') else True
            },
            'story_messages': config.get('story_replies', [])
        }
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
        print(f"üìä –ê–∫–∞—É–Ω—Ç—ñ–≤: {len(automation_config['accounts'])}")
        print(f"üéØ –¶—ñ–ª–µ–π: {len(automation_config['targets'])}")
        print(f"‚ö° –î—ñ—ó: {list(automation_config['actions'].keys())}")
        
        try:
            bot.run_automation(automation_config)
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            return True
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
            logging.error(f"CLI automation error: {e}")
            return False
            
        finally:
            bot.close_all_drivers()
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ CLI —Ä–µ–∂–∏–º—É: {e}")
        logging.error(f"CLI mode error: {e}")
        return False


def run_scheduler_mode(args):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    print("üìÖ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ schedule
        try:
            import schedule
        except ImportError:
            print("‚ùå –î–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ 'schedule'")
            print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó: pip install schedule")
            return False
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = BotConfig(args.config)
        bot = InstagramBot(config.get('captcha_api_key'))
        scheduler = BotScheduler(bot)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        if args.accounts:
            load_accounts_from_file(bot, args.accounts)
        
        targets = []
        if args.targets:
            targets = load_targets_from_file(args.targets)
        else:
            targets = config.get('targets', [])
        
        if not bot.account_manager.accounts:
            print("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞")
            return False
        
        if not targets:
            print("‚ùå –ù–µ–º–∞—î —Ü—ñ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞")
            return False
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
        automation_config = {
            'accounts': [{'username': username} for username in bot.account_manager.accounts.keys()],
            'targets': targets,
            'actions': {
                'like_posts': True,
                'like_stories': True,
                'reply_stories': True
            },
            'story_messages': config.get('story_replies', [])
        }
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        start_time = args.start_time if hasattr(args, 'start_time') else "09:00"
        scheduler.schedule_daily_automation(automation_config, start_time)
        scheduler.schedule_account_rotation(4)
        scheduler.schedule_health_check(30)
        
        print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –Ω–∞ {start_time}")
        print(f"üìä –ê–∫–∞—É–Ω—Ç—ñ–≤: {len(automation_config['accounts'])}")
        print(f"üéØ –¶—ñ–ª–µ–π: {len(automation_config['targets'])}")
        
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
            scheduler.start_scheduler()
            
            print("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø—Ä–∞—Ü—é—î. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
            while True:
                time.sleep(60)
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                current_time = time.strftime("%H:%M:%S")
                print(f"‚è±Ô∏è {current_time} - –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏–π")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            
        finally:
            scheduler.stop_scheduler()
            bot.close_all_drivers()
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
        logging.error(f"Scheduler error: {e}")
        return False


def load_accounts_from_file(bot: InstagramBot, file_path: str) -> int:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        return 0
    
    count = 0
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                parts = line.split(':')
                if len(parts) >= 2:
                    username = parts[0].strip()
                    password = parts[1].strip()
                    proxy = ':'.join(parts[2:]).strip() if len(parts) > 2 else None
                    
                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
                    from utils import ValidationUtils
                    if not ValidationUtils.validate_username(username):
                        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ª–æ–≥—ñ–Ω –≤ —Ä—è–¥–∫—É {line_num}: {username}")
                        continue
                    
                    if proxy and not ValidationUtils.validate_proxy(proxy):
                        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—Ä–æ–∫—Å—ñ –≤ —Ä—è–¥–∫—É {line_num}: {proxy}")
                        proxy = None
                    
                    bot.account_manager.add_account(username, password, proxy)
                    count += 1
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤ —Ä—è–¥–∫—É {line_num}: {line}")
        
        logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {count} –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É {file_path}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        logging.error(f"Error loading accounts: {e}")
    
    return count


def load_targets_from_file(file_path: str) -> List[str]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π –∑ —Ñ–∞–π–ª—É"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª —Ü—ñ–ª–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        return []
    
    targets = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                target = line.strip()
                if target and not target.startswith('#'):
                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
                    from utils import ValidationUtils
                    if ValidationUtils.validate_username(target):
                        targets.append(target)
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–ª—å –≤ —Ä—è–¥–∫—É {line_num}: {target}")
        
        logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(targets)} —Ü—ñ–ª–µ–π –∑ —Ñ–∞–π–ª—É {file_path}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π: {e}")
        logging.error(f"Error loading targets: {e}")
    
    return targets


def create_sample_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤ —Ñ–∞–π–ª—ñ–≤"""
    print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤ —Ñ–∞–π–ª—ñ–≤...")
    
    # –ó—Ä–∞–∑–æ–∫ —Ñ–∞–π–ª—É –∞–∫–∞—É–Ω—Ç—ñ–≤
    accounts_sample = """# –§–æ—Ä–º–∞—Ç: username:password:proxy (proxy –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# –ü—Ä–∏–∫–ª–∞–¥–∏:
# my_account:my_password
# account2:password2:127.0.0.1:8080
# account3:password3:proxy.example.com:3128:user:pass

# –í–∞—à—ñ –∞–∫–∞—É–Ω—Ç–∏:
"""
    
    if not os.path.exists('accounts_sample.txt'):
        with open('accounts_sample.txt', 'w', encoding='utf-8') as f:
            f.write(accounts_sample)
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ accounts_sample.txt")
    
    # –ó—Ä–∞–∑–æ–∫ —Ñ–∞–π–ª—É —Ü—ñ–ª–µ–π
    targets_sample = """# –°–ø–∏—Å–æ–∫ —Ü—ñ–ª—å–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä—è–¥–æ–∫)
# –ü—Ä–∏–∫–ª–∞–¥–∏:
# target_user1
# target_user2
# target_user3

# –í–∞—à—ñ —Ü—ñ–ª—ñ:
"""
    
    if not os.path.exists('targets_sample.txt'):
        with open('targets_sample.txt', 'w', encoding='utf-8') as f:
            f.write(targets_sample)
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ targets_sample.txt")


def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É"""
    help_text = """
ü§ñ INSTAGRAM AUTOMATION BOT

üìñ –ö–û–ú–ê–ù–î–ò –ó–ê–ü–£–°–ö–£:
  python run.py --mode gui                    # GUI —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)
  python run.py --mode cli                    # CLI —Ä–µ–∂–∏–º
  python run.py --mode scheduler              # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫

üîß –ü–ê–†–ê–ú–ï–¢–†–ò:
  --config FILE                               # –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: bot_config.json)
  --accounts FILE                             # –§–∞–π–ª –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏
  --targets FILE                              # –§–∞–π–ª –∑ —Ü—ñ–ª—è–º–∏
  --start-time TIME                           # –ß–∞—Å –∑–∞–ø—É—Å–∫—É –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ (HH:MM)

üìã –ü–†–ò–ö–õ–ê–î–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:

  # –ó–∞–ø—É—Å–∫ GUI
  python run.py

  # CLI –∑ –≤–ª–∞—Å–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
  python run.py --mode cli --accounts my_accounts.txt --targets my_targets.txt

  # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑ –∑–∞–ø—É—Å–∫–æ–º –æ 10:00
  python run.py --mode scheduler --start-time 10:00

üìÅ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–Ü–í:

  bot_config.json                             # –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
  accounts.txt                                # –ê–∫–∞—É–Ω—Ç–∏ (username:password:proxy)
  targets.txt                                 # –¶—ñ–ª—ñ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä—è–¥–æ–∫)
  
üìä –õ–û–ì–ò –¢–ê –î–ê–ù–Ü:
  
  logs/instagram_bot.log                      # –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥
  account_sessions.json                       # –°–µ—Å—ñ—ó –∞–∫–∞—É–Ω—Ç—ñ–≤  
  statistics.json                             # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏

üîí –ë–ï–ó–ü–ï–ö–ê:

  ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
  ‚Ä¢ –ù–µ –ø–µ—Ä–µ–≤–∏—â—É–π—Ç–µ –¥–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–∏ (50-100 –¥—ñ–π)
  ‚Ä¢ –†–æ–±—ñ—Ç—å –ø–µ—Ä–µ—Ä–≤–∏ –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏
  ‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞–Ω –∞–∫–∞—É–Ω—Ç—ñ–≤

üìû –ü–Ü–î–¢–†–ò–ú–ö–ê:

  –õ–æ–≥–∏ –ø–æ–º–∏–ª–æ–∫: logs/instagram_bot.log
  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: bot_config.json
  –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: README.md
"""
    
    print(help_text)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ë–∞–Ω–µ—Ä
    print("\n" + "="*60)
    print("ü§ñ  INSTAGRAM AUTOMATION BOT v2.0")
    print("="*60)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    parser = argparse.ArgumentParser(
        description='Instagram Automation Bot - –±–µ–∑–ø–µ—á–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –¥—ñ–π –≤ Instagram',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python run.py                              # GUI —Ä–µ–∂–∏–º
  python run.py --mode cli --accounts accounts.txt --targets targets.txt
  python run.py --mode scheduler --start-time 09:00
        """
    )
    
    parser.add_argument('--mode', 
                       choices=['gui', 'cli', 'scheduler'], 
                       default='gui', 
                       help='–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: gui)')
    
    parser.add_argument('--config', 
                       default='bot_config.json', 
                       help='–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó')
    
    parser.add_argument('--accounts', 
                       help='–§–∞–π–ª –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏ (username:password:proxy)')
    
    parser.add_argument('--targets', 
                       help='–§–∞–π–ª –∑ —Ü—ñ–ª—è–º–∏')
    
    parser.add_argument('--start-time', 
                       default='09:00',
                       help='–ß–∞—Å –∑–∞–ø—É—Å–∫—É –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ (HH:MM)')
    
    parser.add_argument('--like-posts', 
                       action='store_true',
                       help='–õ–∞–π–∫–∞—Ç–∏ –ø–æ—Å—Ç–∏')
    
    parser.add_argument('--like-stories', 
                       action='store_true',
                       help='–õ–∞–π–∫–∞—Ç–∏ —Å—Ç–æ—Ä—ñ—Å')
    
    parser.add_argument('--reply-stories', 
                       action='store_true',
                       help='–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å')
    
    parser.add_argument('--create-samples', 
                       action='store_true',
                       help='–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑—Ä–∞–∑–∫–∏ —Ñ–∞–π–ª—ñ–≤')
    
    parser.add_argument('--check-system', 
                       action='store_true',
                       help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏')
    
    parser.add_argument('--help-detailed', 
                       action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É –¥–æ–≤—ñ–¥–∫—É')
    
    parser.add_argument('--version', 
                       action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é')
    
    # –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    try:
        args = parser.parse_args()
    except SystemExit:
        return 1
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    if args.version:
        print("Instagram Bot v2.0.0")
        print("Python:", sys.version)
        return 0
    
    if args.help_detailed:
        show_help()
        return 0
    
    if args.create_samples:
        create_sample_files()
        return 0
    
    if args.check_system:
        if check_system_requirements():
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
            return 0
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return 1
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
    if not check_system_requirements():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ")
        print("–ó–∞–ø—É—Å—Ç—ñ—Ç—å: python run.py --check-system –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        return 1
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    setup_environment()
    
    # –ó–∞–ø—É—Å–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    success = False
    
    try:
        if args.mode == 'gui':
            success = run_gui_mode()
        elif args.mode == 'cli':
            success = run_cli_mode(args)
        elif args.mode == 'scheduler':
            success = run_scheduler_mode(args)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        success = True
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logging.error(f"Critical error: {e}")
        success = False
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    print("\n" + "="*60)
    if success:
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    else:
        print("‚ùå –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: logs/instagram_bot.log")
    print("="*60)
    
    return 0 if success else 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)